<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ferjm</title>
    <description>coding out loud</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 10 Jul 2019 11:08:10 +0200</pubDate>
    <lastBuildDate>Wed, 10 Jul 2019 11:08:10 +0200</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Servo Media Mid-Year review</title>
        <description>&lt;p&gt;We recently closed the first half of 2019 and with that it is time to look back and do a quick summary of what the media team has achieved during this 6 months period.&lt;/p&gt;

&lt;p&gt;Looking at some stats, we merged 87 Pull Requests, we opened 56 issues, we closed 42 issues and we welcomed 13 new amazing contributors to the media stack.&lt;/p&gt;

&lt;h2 id=&quot;av-playback&quot;&gt;A/V playback&lt;/h2&gt;

&lt;p&gt;These are some of the selected A/V playback related H1 acomplishments&lt;/p&gt;

&lt;h4 id=&quot;media-cache-and-improved-seeking&quot;&gt;Media cache and improved seeking&lt;/h4&gt;

&lt;p&gt;We significally &lt;a href=&quot;https://github.com/servo/servo/pull/22692&quot;&gt;improved&lt;/a&gt; the seeking experience of audio and video files by implementing preloading and buffering support and a media cache.&lt;/p&gt;

&lt;iframe title=&quot;vimeo-player&quot; src=&quot;https://player.vimeo.com/video/311414154&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;basic-media-controls&quot;&gt;Basic media controls&lt;/h4&gt;

&lt;p&gt;After a few months of work we got &lt;a href=&quot;https://github.com/servo/servo/pull/22743&quot;&gt;partial support for the Shadow DOM API&lt;/a&gt;, which gave us the opportunity to implement our first basic set of &lt;a href=&quot;https://github.com/servo/servo/pull/23208&quot;&gt;media controls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/media-p.slid.es/uploads/105177/images/6275339/Jun-19-2019_17-11-57.gif&quot; alt=&quot;media controls&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The UI is not perfect, among other things, because we still have no way to render a progress or volume bar properly, as that depends on the &lt;code class=&quot;highlighter-rouge&quot;&gt;input type=&quot;range&quot;&amp;gt;&lt;/code&gt; layout, which so far is rendered as a simple text box instead of the usual slider with a thumb.&lt;/p&gt;

&lt;h4 id=&quot;gstreamer-backend-for-magicleap&quot;&gt;GStreamer backend for MagicLeap&lt;/h4&gt;

&lt;p&gt;Another great achievement by &lt;a href=&quot;https://github.com/xclaesse&quot;&gt;Xavier Claessens&lt;/a&gt; from &lt;a href=&quot;https://www.collabora.com/&quot;&gt;Collabora&lt;/a&gt; has been the GStreamer backend for &lt;a href=&quot;https://www.magicleap.com/&quot;&gt;Magic Leap&lt;/a&gt;. The work is not completely done yet, but as you can see on the animation bellow, he already managed to paint a full screen video on the Magic Leap device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/media-p.slid.es/uploads/105177/images/6274304/Jun-19-2019_13-12-31.gif&quot; alt=&quot;magic leap video&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;hardware-accelerated-decoding&quot;&gt;Hardware accelerated decoding&lt;/h4&gt;

&lt;p&gt;One of the most wanted features that we have been working on for almost a year and that has recently landed is hardware accelerated decoding.&lt;/p&gt;

&lt;p&gt;Thanks to the excellent and constant work from the &lt;a href=&quot;https://www.igalia.com/&quot;&gt;Igalian&lt;/a&gt; &lt;a href=&quot;https://github.com/ceyusa&quot;&gt;Víctor Jáquez&lt;/a&gt;, Servo recently gained &lt;a href=&quot;https://github.com/servo/servo/pull/23483&quot;&gt;support for hardware-accelerated media playback&lt;/a&gt;, which means lower CPU usage, better battery life and better thermal behaviour, among other goodies.&lt;/p&gt;

&lt;p&gt;We only have support on Linux and Android (EGL and Wayland) so far. Support for other platforms is on the roadmap.&lt;/p&gt;

&lt;video src=&quot;https://s3.amazonaws.com/media-p.slid.es/videos/105177/rzteE40V/hwacceleration.mp4&quot; width=&quot;640&quot; controls=&quot;&quot;&gt;&lt;/video&gt;

&lt;p&gt;The numbers we are getting are already pretty nice. You might not be able to see it clearly on the video, but the renderer CPU time for the non hardware accelerated playback is ~8ms, compared to the ~1ms of CPU time that we get with the accelerated version.&lt;/p&gt;

&lt;h4 id=&quot;improved-web-compatibility-of-our-media-elements-implementation&quot;&gt;Improved web compatibility of our media elements implementation&lt;/h4&gt;

&lt;p&gt;We also got a bunch of other smaller features that significantly improved the web compatibility of our media elements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/servo/ferjm&quot;&gt;ferjm&lt;/a&gt; &lt;a href=&quot;https://github.com/servo/servo/pull/22399&quot;&gt;added&lt;/a&gt; support for the HTMLMediaElement &lt;code class=&quot;highlighter-rouge&quot;&gt;poster&lt;/code&gt; frame attribute&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swarnimarun&quot;&gt;swarnimarun&lt;/a&gt; &lt;a href=&quot;https://github.com/servo/servo/pull/23236&quot;&gt;implemented&lt;/a&gt; support for the HTMLMediaElement &lt;code class=&quot;highlighter-rouge&quot;&gt;loop&lt;/code&gt; attribute&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jackxbritton&quot;&gt;jackxbritton&lt;/a&gt; &lt;a href=&quot;https://blog.servo.org/2019/07/09/media-update-h1-2019/&quot;&gt;implemented&lt;/a&gt; the HTMLMediaElement &lt;code class=&quot;highlighter-rouge&quot;&gt;crossorigin&lt;/code&gt; attribute logic.&lt;/li&gt;
  &lt;li&gt;Servo got the ability to &lt;a href=&quot;https://github.com/servo/servo/pull/22347&quot;&gt;mute and unmute&lt;/a&gt; as well as controlling the &lt;a href=&quot;https://github.com/servo/servo/pull/22324&quot;&gt;volume&lt;/a&gt; of audio and video playback thanks to &lt;a href=&quot;https://github.com/stevesweetney&quot;&gt;stevesweetney&lt;/a&gt; and &lt;a href=&quot;https://github.com/lucasfantacuci&quot;&gt;lucasfantacuci&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sreeise&quot;&gt;sreeise&lt;/a&gt; &lt;a href=&quot;https://github.com/servo/servo/pull/22622&quot;&gt;implemented&lt;/a&gt; the AudioTrack, VideoTrack, AudioTrackList and VideoTrackList interfaces.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/georgeroman&quot;&gt;georgeroman&lt;/a&gt; &lt;a href=&quot;https://github.com/servo/servo/pull/22449&quot;&gt;coded&lt;/a&gt; the required changes to allow changing the playback rate of audio and video files.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/georgeroman&quot;&gt;georgeroman&lt;/a&gt;, again, &lt;a href=&quot;https://github.com/servo/media/pull/232&quot;&gt;implemented&lt;/a&gt; support for the HTMLMediaElement &lt;code class=&quot;highlighter-rouge&quot;&gt;canPlayType&lt;/code&gt; function.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dlrobertson&quot;&gt;dlrobertson&lt;/a&gt; paved the way for timed text tracks support by implementing the basics of the &lt;a href=&quot;https://github.com/servo/servo/pull/22392&quot;&gt;TextTrack API&lt;/a&gt; and the &lt;a href=&quot;https://github.com/servo/servo/pull/22563&quot;&gt;HTMLTrackElement interface&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;webaudio&quot;&gt;WebAudio&lt;/h1&gt;
&lt;p&gt;We also got a few additions on the WebAudio land.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PurpleHairEngineer&quot;&gt;PurpleHairEngineer&lt;/a&gt; &lt;a href=&quot;https://github.com/servo/media/pull/243&quot;&gt;implemented&lt;/a&gt; the StereoPannerNode backend.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/collares&quot;&gt;collares&lt;/a&gt; &lt;a href=&quot;https://github.com/servo/servo/pull/22648&quot;&gt;implemented&lt;/a&gt; the DOM side of the ChannelSplitterNode.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Akhilesh1996&quot;&gt;Akhilesh1996&lt;/a&gt; &lt;a href=&quot;https://github.com/servo/servo/pull/23259&quot;&gt;implemented&lt;/a&gt; the AudioParam setValueCurveAtTime function.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/snarasi6&quot;&gt;snarasi6&lt;/a&gt; &lt;a href=&quot;https://github.com/servo/servo/pull/23279&quot;&gt;implemented&lt;/a&gt; the deprecated setPosition and setOrientation AudioListener methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;webrtc&quot;&gt;WebRTC&lt;/h1&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/jdm&quot;&gt;jdm&lt;/a&gt;’s and &lt;a href=&quot;https://github.com/Manishearth&quot;&gt;Manishearth&lt;/a&gt;’s work, Servo has now the foundations of a &lt;a href=&quot;https://github.com/servo/servo/pull/23377&quot;&gt;WebRTC implementation&lt;/a&gt; and it is able to perform a 2-way calling with audio and video playback coming from the &lt;a href=&quot;https://github.com/servo/servo/pull/22780&quot;&gt;getUserMedia API&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/328247783&quot; width=&quot;640&quot; height=&quot;392&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;That’s &lt;strong&gt;not&lt;/strong&gt; all folks!&lt;/em&gt; We have exciting plans for the second half of 2019.&lt;/p&gt;

&lt;h1 id=&quot;av-playback-1&quot;&gt;A/V playback&lt;/h1&gt;
&lt;p&gt;On the A/V playback land, we want to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Focus on adding hardware accelerated playback on Windows and OSX.&lt;/li&gt;
  &lt;li&gt;Add support for fullscreen playback.&lt;/li&gt;
  &lt;li&gt;Add support for 360 video.&lt;/li&gt;
  &lt;li&gt;Improve the existing media controls by, for instance, implementing a nicer layout for the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;range&quot;&amp;gt;&lt;/code&gt; element, with a proper slider and a thumb, so we can have progress and volume bars.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;webaudio-1&quot;&gt;WebAudio&lt;/h1&gt;
&lt;p&gt;For WebAudio there are plans to make some architectural improvements related to the timeline and the graph traversals.&lt;/p&gt;

&lt;p&gt;We would also love to work on the MediaElementAudioSourceNode implementation.&lt;/p&gt;

&lt;h1 id=&quot;webrtc-1&quot;&gt;WebRTC&lt;/h1&gt;
&lt;p&gt;For WebRTC, data channels are on the roadmap for the second half.&lt;/p&gt;

&lt;p&gt;We currently support the playback of a single stream of audio and video simultaneously, so allowing the playback of multiple simulatenous streams of each type is also something that we would like to get during the following months.&lt;/p&gt;

&lt;h1 id=&quot;others&quot;&gt;Others&lt;/h1&gt;
&lt;p&gt;There were also plans to implement support for a global mute feature, and I am happy to say, that &lt;a href=&quot;https://github.com/khodzha&quot;&gt;khodza&lt;/a&gt; already &lt;a href=&quot;https://github.com/servo/media/pull/271&quot;&gt;got this done&lt;/a&gt; right at the start of the second half.&lt;/p&gt;

&lt;p&gt;Finally, we have been trying to get Youtube to work on Servo, but it turned out to be a difficult task because of non-media related issues (i.e. layout or web compatibility issues), so we decided to adjust the goal and focus on embedded Youtube support instead.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Originally published at &lt;a href=&quot;https://blog.servo.org/&quot;&gt;https://blog.servo.org/&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Jul 2019 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/media/2019/07/09/media-update-h1-2019.html</link>
        <guid isPermaLink="true">http://localhost:4000/media/2019/07/09/media-update-h1-2019.html</guid>
        
        
        <category>media</category>
        
      </item>
    
      <item>
        <title>TIDx 2018 talk - Rust 101</title>
        <description>&lt;p&gt;On February 2018 I gave an introductory talk about Rust at the TIDx conference.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/eLYfMDApTVA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 28 Feb 2018 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/rust/talk/2018/02/28/tidx-talk-rust-101.html</link>
        <guid isPermaLink="true">http://localhost:4000/rust/talk/2018/02/28/tidx-talk-rust-101.html</guid>
        
        
        <category>rust</category>
        
        <category>talk</category>
        
      </item>
    
      <item>
        <title>Project Link Networking</title>
        <description>&lt;p&gt;For the last few months, I have been involved in &lt;a href=&quot;https://wiki.mozilla.org/Project_Link&quot;&gt;Project Link&lt;/a&gt;, one of Mozilla’s &lt;a href=&quot;https://wiki.mozilla.org/Connected_Devices&quot;&gt;Connected Devices&lt;/a&gt; new research projects that aims to create a personal User Agent for the smart homes.&lt;/p&gt;

&lt;p&gt;We have recently completed our &lt;a href=&quot;https://wiki.mozilla.org/Project_Link#Phase_1&quot;&gt;first milestone&lt;/a&gt; where we managed to prototype a device that is able to communicate with a small set of other different devices through some wireless communication protocols like &lt;a href=&quot;https://en.wikipedia.org/wiki/ZigBee&quot;&gt;Zigbee&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Z-Wave&quot;&gt;Z-Wave&lt;/a&gt; and that exposes an &lt;a href=&quot;https://wiki.mozilla.org/Connected_Devices/Projects/Project_Link/Taxonomy#Current_REST_API&quot;&gt;HTTP API&lt;/a&gt; for clients to get moderated access to these devices through the Link hub. So as today, we are able to setup a Link device in a network where other devices like a set of smart light bulbs, a smart door lock and a motion sensor are connected and we are able to create rules, from inside and outside of that network, to do things like turning off the lights, locking the door and sending a notification when the motion sensor detects that the user leaves her home.&lt;/p&gt;

&lt;p&gt;Making Link communicate with the different devices through Zigbee or Z-Wave was certainly not an easy task and it required a lot of effort from many members of the team. But it was something that somehow we knew that we could do. In the end, these are known protocols, and even if we had to write a lot of code from scratch because of the choice of technology (&lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;), there are already a lot of products in the market based on these technologies and a few examples of code that we could take as a starting point for our work.&lt;/p&gt;

&lt;p&gt;To me, one of the most interesting challenges that we had to face during this initial stage of the project has been how to discover and securely connect to Link (a.k.a &lt;em&gt;the box&lt;/em&gt;) from the client side while keeping a decent UX.&lt;/p&gt;

&lt;p&gt;As Mozillians, &lt;a href=&quot;https://www.youtube.com/watch?v=Aw4mTrFW9sU&quot;&gt;we believe in the power of the web&lt;/a&gt;, so one of our self-imposed initial requirements for this project was that we wanted our &lt;a href=&quot;https://github.com/fxbox/app&quot;&gt;client demo application&lt;/a&gt; to be written entirely with web technologies. We wanted to make this client potentially able to run on any platform with a modern web browser. And there were also other requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This client had to be able to access Link locally, from the same network where the Link device was running on, but also remotely, from outside of that network.&lt;/li&gt;
  &lt;li&gt;The connection between Link and the client had to be securely encrypted in both cases (local and remote access).&lt;/li&gt;
  &lt;li&gt;And both things needed to happen seamlessly and transparently for the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://michielbdejong.com/&quot;&gt;Michiel B. de Jong&lt;/a&gt; did an excellent research work about the discovery and secure connection area and he proposed a few &lt;a href=&quot;https://github.com/fxbox/RFC/issues/3&quot;&gt;different solutions&lt;/a&gt; to these problems, that included different combinations of cloud, &lt;a href=&quot;https://en.wikipedia.org/wiki/QR_code&quot;&gt;QR codes&lt;/a&gt;, &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Multicast_DNS&quot;&gt;mDNS&lt;/a&gt; and other technologies and protocols.&lt;/p&gt;

&lt;p&gt;While we do not discard implementing any other of these proposals for the next phases of the project, for the initial prototype we ended up choosing a solution that most part of the team considered that had a good balance between security, privacy and user friendly experience and that could work cross platform and cross browser, taking advantage of the full power of the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discovering the box&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the discovery part, we implemented the same mechanism that Philips uses to discover their &lt;a href=&quot;http://www.developers.meethue.com/documentation/getting-started&quot;&gt;Hue Lights Bridge&lt;/a&gt;. They call this &lt;em&gt;nUPNP&lt;/em&gt; (network UPNP). And it is pretty simple. It requires Link to periodically register itself with a server in the cloud that has a known URL for the client. The data that is stored for this registration is a match between Link’s public and local IP addresses. To get the local address, the client just needs to do a HTTP GET request to the registration server &lt;em&gt;ping&lt;/em&gt; endpoint, which should return a JSON object containing this information. This request has to be done from the same network Link is connected to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Securely connecting to the box&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, we cannot securely connect to local IP addresses through HTTPS. At least not with a proper UX that would not require a terrified user to accept warnings about &lt;a href=&quot;https://support.cdn.mozilla.net/media/uploads/gallery/images/2011-10-19-09-09-25-5809bb.jpg&quot;&gt;insecure connections&lt;/a&gt;, and even in that case (with a self-signed certificate), it would be quite a poor security solution. We needed host names and a trusted &lt;a href=&quot;https://en.wikipedia.org/wiki/Certificate_authority&quot;&gt;CA&lt;/a&gt; for this. And here is where Let’sEncrypt and &lt;a href=&quot;https://blog.filippo.io/how-plex-is-doing-https-for-all-its-users/&quot;&gt;Plex’s solution&lt;/a&gt; enter in the game.&lt;/p&gt;

&lt;p&gt;We heard about this company called Plex that has a very similar use case as ours and that is offering secure TLS connections to all their users. They have these media servers that users can self-host in their machines and can access to them securely from other devices. You can read about the details of Plex’s implementation in this &lt;a href=&quot;https://blog.filippo.io/how-plex-is-doing-https-for-all-its-users/&quot;&gt;blog post&lt;/a&gt; and see how it slightly defers from ours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remotely accessing the box (a.k.a tunneling)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To provide remote access to Link for those users that choose to have this kind of feature, we initially tried to use &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt;, but we found out that they do not support &lt;a href=&quot;https://es.wikipedia.org/wiki/Server_Name_Indication&quot;&gt;SNI&lt;/a&gt; on their open source version. So we ended up moving to &lt;a href=&quot;https://pagekite.net/&quot;&gt;PageKite&lt;/a&gt;, which offers the same core functionality but also provides SNI support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Putting it all together&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With all the above we ended up implementing the following bootstrap process for Link:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Link exposes HTTP and WebSockets services.&lt;/li&gt;
  &lt;li&gt;First thing that Link does is to generate a self-signed certificate that becomes its identifier.&lt;/li&gt;
  &lt;li&gt;It connects to an &lt;a href=&quot;https://github.com/fxbox/dns-server&quot;&gt;API&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;knilxof.org&lt;/code&gt; (our dev server) to create its public DNS zone under &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;fingerprint&amp;gt;.knilxof.org&lt;/code&gt;, using its self-signed certificate as a client certificate. The API server checks the fingerprint from the DNS zone edit request against the fingerprint of the client certificate presented.&lt;/li&gt;
  &lt;li&gt;Now that the Box has a public DNS zone it can control, it can get a LetsEncrypt certificate, using the &lt;a href=&quot;https://letsencrypt.github.io/acme-spec/#rfc.section.7.4&quot;&gt;DNS-01 challenge&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Link sets its main DNS A record to its current &lt;strong&gt;local&lt;/strong&gt; IP address which it obtained via DHCP earlier. It will update this A record whenever its local IP address changes.&lt;/li&gt;
  &lt;li&gt;It also sets two or more mirror A records to its current local IP address. The idea here being that only one of the records will be cached by caching DNS servers, so switching to the other one at the right time will avoid downtime due to DNS propagation delays. This is currently not implemented.&lt;/li&gt;
  &lt;li&gt;If Link is setup to allow remote access, it starts up a PageKite client, which connects to a PageKite frontend, and adds the IP address of the public interface to the PageKite frontend into its DNS zone.&lt;/li&gt;
  &lt;li&gt;With the local, mirrors and tunneled URLs, Link sends a registration request to the nUPNP like &lt;a href=&quot;https://github.com/fxbox/registration_server&quot;&gt;registration server&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After the above process is completed, when the user browses to our &lt;a href=&quot;https://github.com/fxbox/app&quot;&gt;client demo application&lt;/a&gt;, the app makes a cross-origin request to the registration server &lt;em&gt;ping&lt;/em&gt; endpoint to obtain the URLs the app can use to securely connect to Link.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /ping HTTP/1.1

HTTP/1.1 200 OK  
Access-Control-Allow-Origin: *  
Access-Control-Allow-Headers: accept, authorization, content-type  
Content-Type: application/json; charset=utf-8  
Access-Control-Allow-Methods: GET, POST, PUT  
Content-Length: 312  
Date: Fri, 22 Apr 2016 14:39:44 GMT

[{&quot;public_ip&quot;:&quot;88.xxx.xxx.xxx&quot;,&quot;client&quot;:&quot;80a3c3ff0ffc7da455214fe7daaed9216bc4a5a6&quot;,&quot;message&quot;:&quot;{\&quot;local_origin\&quot;:\&quot;https://local.80a3c3ff0ffc7da455214fe7daaed9216bc4a5a6.box.knilxof.org:3000\&quot;,\&quot;tunnel_origin\&quot;:\&quot;https://remote.80a3c3ff0ffc7da455214fe7daaed9216bc4a5a6.box.knilxof.org\&quot;}&quot;,&quot;timestamp&quot;:1461335726}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The connection to the box is completely seamless for the user as she is never asked to enter a URL or to add any security exception on her browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2016/04/Screen-Shot-2016-04-22-at-5-09-24-PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Credits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most part of the design and implementation work has been done by &lt;a href=&quot;http://michielbdejong.com/&quot;&gt;Michiel B. de Jong&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/samuelgiles_&quot;&gt;Sam Giles&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Apr 2016 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/mozilla/iot/networking/2016/04/22/project-link-networking.html</link>
        <guid isPermaLink="true">http://localhost:4000/mozilla/iot/networking/2016/04/22/project-link-networking.html</guid>
        
        
        <category>mozilla</category>
        
        <category>iot</category>
        
        <category>networking</category>
        
      </item>
    
      <item>
        <title>Improving the Firefox OS Contacts application start-up time</title>
        <description>&lt;p&gt;One of the biggest challenges that we have in Firefox OS is the &lt;a href=&quot;https://developer.mozilla.org/en-US/Apps/Build/Performance/Performance_fundamentals&quot;&gt;performance&lt;/a&gt;. We have been fighting it since day one and by applying some &lt;a href=&quot;https://developer.mozilla.org/en-US/Apps/Build/Performance/Optimizing_startup_performance&quot;&gt;different techniques&lt;/a&gt; we managed to get to a point where we have some very decent &lt;a href=&quot;https://datazilla.mozilla.org/b2g&quot;&gt;application start-up time numbers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The last application to get a considerable performance boost has been the Contacts application.&lt;/p&gt;

&lt;p&gt;During the last few weeks, the Contacts team &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1112551&quot;&gt;has been working&lt;/a&gt; on a &lt;a href=&quot;https://github.com/mozilla-b2g/gaia/commit/f1d0684817e5802961c02a04dcf667cfaf09d6ee&quot;&gt;patch&lt;/a&gt; that finally landed on master yesterday. The result is an improvement of around 720 milliseconds of &lt;a href=&quot;https://developer.mozilla.org/en-US/Apps/Build/Performance/Firefox_OS_app_responsiveness_guidelines#Stages&quot;&gt;perceived start-up time&lt;/a&gt;, which means that we saved almost 50% of the previous start-up time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://datazilla.mozilla.org/b2g/?branch=master&amp;amp;device=flame-319MB&amp;amp;range=7&amp;amp;test=startup_%3E_moz-app-visually-complete&amp;amp;app_list=communications/contacts&amp;amp;app=communications/contacts&amp;amp;gaia_rev=9645d45d5777880e&amp;amp;gecko_rev=f6259882882b&amp;amp;plot=median&quot;&gt;Datazilla&lt;/a&gt; already shows the change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/content/images/2015/03/contactsperfimprovement-1.png&quot; alt=&quot;Datazilla changes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stasm/test-perf-summary&quot;&gt;Comparing&lt;/a&gt; the results of running the &lt;a href=&quot;https://developer.mozilla.org/en-US/Firefox_OS/Platform/Automated_testing/Gaia_performance_tests&quot;&gt;Gaia performance tests&lt;/a&gt; with a heavy workload before and after the patch we get the following numbers:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;communications/contacts (means in ms)&lt;/th&gt;
      &lt;th&gt;Base&lt;/th&gt;
      &lt;th&gt;Patch&lt;/th&gt;
      &lt;th&gt;Δ&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;moz-chrome-dom-loaded&lt;/td&gt;
      &lt;td&gt;1147&lt;/td&gt;
      &lt;td&gt;585&lt;/td&gt;
      &lt;td&gt;-562&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;moz-chrome-interactive&lt;/td&gt;
      &lt;td&gt;1267&lt;/td&gt;
      &lt;td&gt;1393&lt;/td&gt;
      &lt;td&gt;126&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;moz-app-visually-complete&lt;/td&gt;
      &lt;td&gt;1601&lt;/td&gt;
      &lt;td&gt;874&lt;/td&gt;
      &lt;td&gt;-727&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;moz-content-interactive&lt;/td&gt;
      &lt;td&gt;2131&lt;/td&gt;
      &lt;td&gt;1393&lt;/td&gt;
      &lt;td&gt;-738&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;moz-app-loaded&lt;/td&gt;
      &lt;td&gt;10942&lt;/td&gt;
      &lt;td&gt;10409&lt;/td&gt;
      &lt;td&gt;-533&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see we are sending the &lt;code class=&quot;highlighter-rouge&quot;&gt;moz-app-visually-complete&lt;/code&gt; event ~727 milliseconds earlier than before. This is the event that we use to indicate that the application appears visually ready for user interaction and the one that we really want to send as soon as possible. We also get similar improvements for the &lt;code class=&quot;highlighter-rouge&quot;&gt;moz-chrome-dom-loaded&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;moz-content-interactive&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;moz-app-loaded&lt;/code&gt; events. You can also notice that we had to make some trade offs and we lost some ground with the &lt;code class=&quot;highlighter-rouge&quot;&gt;moz-chrome-interactive&lt;/code&gt; event. If you look closer, you will see that chrome and content are marked as interactive at the same time. This was not happening before. We were not able to interact with the application content until almost one second after being able to interact with the application chrome. Now we have everything ready at once ~700 milliseconds before and given that the most important part of the Contacts application is the contacts data itself, we consider that the small lost in the &lt;code class=&quot;highlighter-rouge&quot;&gt;moz-chrome-interactive&lt;/code&gt; event is worth the result. You can check the &lt;a href=&quot;https://developer.mozilla.org/en-US/Apps/Build/Performance/Firefox_OS_app_responsiveness_guidelines#Stages&quot;&gt;MDN responsiveness guidelines&lt;/a&gt; page for more details about these events.&lt;/p&gt;

&lt;p&gt;I recorded a quick video comparing the previous situation (left) with the current one (right). (Apologies for the low quality of the recording).&lt;/p&gt;

&lt;iframe title=&quot;vimeo-player&quot; src=&quot;https://player.vimeo.com/video/121901924&quot; width=&quot;710&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-did-we-get-there&quot;&gt;How did we get there&lt;/h2&gt;

&lt;p&gt;The target was to have some usable UI ready as soon as possible before the browser painted anything on the screen. For us, this usable UI is the application chrome with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Add contact&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; options and the first chunk of contacts, including favorite and &lt;a href=&quot;http://en.wikipedia.org/wiki/In_case_of_emergency&quot;&gt;ICE&lt;/a&gt; contacts.&lt;/p&gt;

&lt;p&gt;So far we were not doing bad showing the application chrome, but we were taking extra time to load the first group of visible contacts. To show this first content we needed to do a request to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozContacts&quot;&gt;MozContacts API&lt;/a&gt; to obtain the list of stored contacts and start appending to the DOM one new node per each contact information retrieved. The thing is that the result of this request rarely changed from one execution to the other. So why not caching it?&lt;/p&gt;

&lt;p&gt;We followed the same approach that the Email team already applied on the &lt;a href=&quot;https://groups.google.com/forum/#!topic/mozilla.dev.gaia/v_jVuwOJMKI&quot;&gt;Email application&lt;/a&gt; for caching the email list. We used &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&quot;&gt;localStorage&lt;/a&gt; to save the result of getting the contacts list from the MozContacts API and rendering the first chunk of contacts. To avoid having to do object serialization and parsing before and after accessing the localStorage item, we initially tried storing the whole &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML&quot;&gt;outerHTML&lt;/a&gt; string of the &lt;a href=&quot;https://github.com/mozilla-b2g/gaia/blob/master/apps/communications/contacts/index.html#L218&quot;&gt;contacts groups container&lt;/a&gt; holding the first chunk of contacts and applying it via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;innerHTML&lt;/a&gt;, but that did not give good enough performance and it made the logic for managing the contacts cache harder. Also, in the end we figured out that we needed to store other information like the language direction or the cache date along with the HTML to decide wether the cache was valid or not, so object serialization and parsing was required in any case. Instead of that, we ended up storing an object with this information to ease the cache eviction decision and enough information to rebuild the DOM containing the first chunk of contacts. We applied this data to the DOM via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment&quot;&gt;documentFragment&lt;/a&gt;. You can checkout the code for &lt;a href=&quot;https://github.com/mozilla-b2g/gaia/blob/master/apps/communications/contacts/js/views/list.js#L2274&quot;&gt;building&lt;/a&gt; and &lt;a href=&quot;https://github.com/mozilla-b2g/gaia/blob/master/apps/communications/contacts/js/bootstrap.js#L173&quot;&gt;applying&lt;/a&gt; the cache.&lt;/p&gt;

&lt;p&gt;The trickiest part of maintaining this cache is the eviction policy. We need to evict and rebuild the cache every time a contact is changed (added, removed or edited) and because this can happen from inside and from outside of the Contacts app (even when the app is closed), we need to be specially careful and verify the cache after applying it to the DOM without affecting the performance or causing visual reflows. You can follow &lt;a href=&quot;https://github.com/mozilla-b2g/gaia/blob/master/apps/communications/contacts/js/views/list.js#L2375&quot;&gt;this code&lt;/a&gt; to see how we managed to do that. Other scenarios where we need to evict the cache are language direction changes, &lt;a href=&quot;http://en.wikipedia.org/wiki/In_case_of_emergency&quot;&gt;ICE&lt;/a&gt; contacts changes, favorite contacts modifications and when the user changes the way the contacts are displayed (by first or last name).&lt;/p&gt;

&lt;p&gt;Apart from building the cache mechanism we also changed the application bootstrap process in a way that we only load the minimum set of scripts required to get the cached information from localStorage and to apply it in the DOM. Once we have this process completed, we load the rest of the application Javascript that is required to continue the rest of the boot process. You can see this logic in the new &lt;a href=&quot;https://github.com/mozilla-b2g/gaia/blob/master/apps/communications/contacts/js/bootstrap.js#L410&quot;&gt;bootstrap&lt;/a&gt; script.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;We want to keep improving the performance of the Contacts application. The next thing that we want to target is improving the loading of the contacts thumbnails. In fact, &lt;a href=&quot;https://twitter.com/mepartoconmigo&quot;&gt;Francisco Jordano&lt;/a&gt; has already started working on &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1089538&quot;&gt;it&lt;/a&gt; and there are already some visible improvements.&lt;/p&gt;

&lt;iframe width=&quot;710&quot; height=&quot;381&quot; src=&quot;https://www.youtube-nocookie.com/embed/lOx-Ym2qUlM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;We also want to experiment with caching most part or even the whole contacts list in different chunks to allow the user to use the alpha scrolling and to get a fully loaded application even sooner.&lt;/p&gt;

&lt;p&gt;Finally, the Gaia team is starting to play around with &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/service-worker/introduction/&quot;&gt;Service Workers&lt;/a&gt; and with the idea of using this new feature to cache already rendered views in a similar way that we did for Contacts. I cannot wait to see more progress in this area :)&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mepartoconmigo&quot;&gt;Francisco Jordano&lt;/a&gt;, &lt;a href=&quot;https://github.com/JohanLorenzo&quot;&gt;Johan Lorenzo&lt;/a&gt;, &lt;a href=&quot;http://sergimansilla.com/&quot;&gt;Sergi Mansilla&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Mar 2015 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/firefoxos/performance/2015/03/11/improving-fxos-contacts-application-start-up-time.html</link>
        <guid isPermaLink="true">http://localhost:4000/firefoxos/performance/2015/03/11/improving-fxos-contacts-application-start-up-time.html</guid>
        
        
        <category>firefoxos</category>
        
        <category>performance</category>
        
      </item>
    
      <item>
        <title>Behind the scenes of the new Web Payments API from Mozilla</title>
        <description>&lt;p&gt;When we started working on &lt;a href=&quot;http://blog.digital.telefonica.com/?press-release=telefonica-outlines-launch-plans-for-firefox-os&quot;&gt;Firefox OS&lt;/a&gt;, we realized that one of the biggest challenges would be enabling web application developers to securely monetise their content, not only for Firefox OS but for the Open Web in general.&lt;/p&gt;

&lt;p&gt;We were looking for the same seamless experience that developers find in existing mobile app stores but we wanted to avoid tying them to any store or proprietary solution, while also allowing them to use the same payment mechanisms in desktop and mobile. We also had the challenge of easing the user’s payment process by adding carrier billing capabilities, along with other payment methods like credit cards, to this solution.&lt;/p&gt;

&lt;p&gt;The Mozilla Marketplace team already had an experimental feature based on &lt;a href=&quot;https://developers.google.com/commerce/wallet/digital/docs/index&quot;&gt;google.payments.inapp.buy&lt;/a&gt; to allow developers to add the capability for in-app payments to their apps. However, this solution was tied to the Firefox Marketplace and, as with Google’s solution, it involved the injection of a JS shim in the application code. So even if we liked this approach, we needed to modify it to fulfill our self-imposed requirements.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;http://andreasgal.com/&quot;&gt;Andreas Gal’s&lt;/a&gt; help, we started writing the first draft of &lt;a href=&quot;https://docs.google.com/document/d/1NLKbHVPQXa9uvDBC3cfgOD7sIrtIxi0qDoXMQrxcCsI/edit&quot;&gt;navigator.mozPay()&lt;/a&gt; with the intention of proposing the first steps for an API that allows Open Web Apps to initiate payment requests from the user for digital goods with multiple payment providers and carrier billing options.&lt;/p&gt;

&lt;p&gt;Once we had an agreement from both the Telefónica and Mozilla teams, we started implementing it for Firefox OS with valuable support from &lt;a href=&quot;https://github.com/fabricedesre&quot;&gt;Fabrice Desré&lt;/a&gt; and &lt;a href=&quot;https://github.com/kumar303&quot;&gt;Kumar McMillan&lt;/a&gt;. Along with this work, the &lt;a href=&quot;http://bluevia.com/&quot;&gt;BlueVia&lt;/a&gt; and Firefox Marketplace teams also started working on a first implementation of the WebPaymentProvider &lt;a href=&quot;https://wiki.mozilla.org/WebAPI/WebPaymentProvider&quot;&gt;spec&lt;/a&gt;, one after the other, and we started working with &lt;a href=&quot;http://bango.com/&quot;&gt;Bango&lt;/a&gt; to enable them as a payment partner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it works&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The navigator.mozPay API allows the developer to create payment requests for different payment providers to charge a user for the purchase of a digital good. In order to create each payment request, the developer needs to create a &lt;a href=&quot;http://openid.net/specs/draft-jones-json-web-token-07.html&quot;&gt;JSON Web Token (JWT)&lt;/a&gt; for each payment provider signed with the Application Secret given by each corresponding provider. This token contains the details of the payment request, including the Application Key, which uniquely identifies the developer and the product being sold.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;iss&quot;: APPLICATION_KEY,
  &quot;aud&quot;: &quot;marketplace.firefox.com&quot;,
  ...
  &quot;request&quot;: {
    &quot;name&quot;: &quot;Magical Unicorn&quot;,
    &quot;pricePoint&quot;: 1,
    &quot;postbackURL&quot;: &quot;https://yourapp.com/postback&quot;,
    &quot;chargebackURL&quot;: &quot;https://yourapp.com/chargeback&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Applications using navigator.mozPay asynchronously receive responses about the completion of payment requests through Javascript callbacks and through POST notifications done by the payment provider to the URLs specified by the developer within the JWT request as postbackURL (for payments) and chargebackURL (for refunds) parameters. The application must only rely on the server side notification to determine the result of a purchase.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var request = navigator.mozPay([signedJWT1, signedJWTn]);
 request.onsuccess = function() {
   console.log('Payment flow successfully completed' + evt.target.result);
   // The payment buy flow completed without errors.
   // This does NOT mean the payment was successful.
   waitForServerPostback();
 };
 request.onerror = function(evt) {
   console.log('navigator.mozPay() error: ' + evt.target.errorMsg.name);
 };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more in-depth documentation read the &lt;a href=&quot;https://wiki.mozilla.org/WebAPI/WebPayment&quot;&gt;navigator.mozPay()&lt;/a&gt; spec and the Firefox Marketplace &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Apps/Publishing/In-app_payments&quot;&gt;guide&lt;/a&gt; to in-app payments.&lt;/p&gt;

&lt;p&gt;The Firefox Marketplace itself uses navigator.mozPay() to request payments for application purchases and so it is a good proof of concept of the usage of the WebPayments API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As Mozilla wrote on their &lt;a href=&quot;https://hacks.mozilla.org/2013/04/introducing-navigator-mozpay-for-web-payments/&quot;&gt;blog&lt;/a&gt; last week, navigator.mozPay() is an experimental API and it is just a first step towards an Open Web Standard for payments. We are already working on some improvements like removing the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!topic/mozilla.dev.webapps/0vUFHASyWB4&quot;&gt;server pre-requisite&lt;/a&gt; entirely or a better user experience for the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!topic/mozilla.dev.b2g/4-FVBgM577I&quot;&gt;payment flow&lt;/a&gt; on the payment provider’s side.&lt;/p&gt;

&lt;p&gt;The plan is to keep working closely with Mozilla and others through the W3C to make a flexible API for payments part of the Open Web Standards.&lt;/p&gt;

&lt;p&gt;After the launch of the first Firefox OS devices, we will be helping Mozilla to add support for navigator.mozPay() to Firefox desktop and Firefox for Android&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Originally published at &lt;a href=&quot;http://en.blogthinkbig.com/2013/04/09/mozilla-web-payments-api/&quot;&gt;BlogThinkBig&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Apr 2013 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/web/payments/api/firefoxos/telefonica/mozilla/2013/04/09/behind-scenes-web-payments-api.html</link>
        <guid isPermaLink="true">http://localhost:4000/web/payments/api/firefoxos/telefonica/mozilla/2013/04/09/behind-scenes-web-payments-api.html</guid>
        
        
        <category>web</category>
        
        <category>payments</category>
        
        <category>api</category>
        
        <category>firefoxos</category>
        
        <category>telefonica</category>
        
        <category>mozilla</category>
        
      </item>
    
  </channel>
</rss>
